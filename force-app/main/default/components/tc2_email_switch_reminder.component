<apex:component controller="Reminders">
  
  <app-reminder inline-template='true' xmlns:v-bind="http://vue.org" xmlns:v-on="http://vue.org" >
    <style>
    
   </style>
    <div class="app-reminder">
      <div class="btn-fixed-side ">
        <button class="button is-info is-large is-rounded animate-gradient-bg" style="padding: 10px 17px; box-shadow: none; margin:0; " 
        v-on:click="showModal"
        v-on:mouseover="showText($event)"
        v-on:mouseout="hideText($event)">
        <span class="icon is-large has-text-info"><i class="far fa-bell fa-2x" style="color:white;"></i></span>
        <span class='txt'>Set Reminder</span></button>
      </div>

        <section class="has-background-info alert is-active band" style="position:relative; ">
          <article class="media container nav-container has-text-white rateboxes" style="padding:.8em;">
              <div class="media-left">
                  <span class="icon is-large has-text-white "><i class="far fa-bell fa-2x" ></i></span>
              </div>
              <div class="media-content">
                  <p class="is-size-5 is-size-6-mobile has-text-weight-semibold">Not ready to switch plans or still in a contract?</p>
                  <p class="is-size-6 is-size-7-mobile">We'll remind you when it's time to return to shop for your next electric plan</p>
              </div>
              <div class="media-right">
                  <button v-on:click="showModal" class="button fixed-size is-info is-large is-rounded is-inverted">Set Reminder</button>
              </div>
          </article>
        </section>
          

          <div id="price-alert-modal" class="modal">
              <div class="modal-background"></div>
              <div class="modal-card">
                  <div id="price-alert-modal-inside" class="modal-card-body has-text-centered">
                      <button v-on:click="closeModal" class="delete is-large" aria-label="close"></button>
                      <div class="modal-card-body-inner">
                          <span class="icon is-large has-text-info"><i class="far fa-bell fa-2x"></i></span>
                          <h1 class="is-size-4 has-text-weight-semibold">Create a switch reminder</h1>
                          <p>Tell us when you're ready to switch, and we will email you a reminder two weeks ahead of your switch date.</p>
                              <div class="field is-horizontal">
                                  <div class="field-body">
                                      <div class="field">
                                          <p class="control is-expanded">
                                              <label class="form-label" for="email">Email Address</label>
                                              <input class="input borderless" id="email" minlength="3" maxlength="45" type="email" v-model="email" required="required" />
                                          </p>
                                      </div>
                                  </div>
                              </div>
                              <div class="field is-horizontal">
                                  <div class="field-body">
                                      <div class="field">
                                          <p class="control is-expanded focused is-focused is-static">
                                              <label class="form-label" for="date">Switch Date</label>
                                              <input class="input borderless is-focused is-static" placeholder=" " id="date" type="date" required="required" v-model="switchDate"/>
                                          </p>
                                      </div>
                                  </div>
                              </div>
                              <button v-on:click="closeModalAndHideBar" class="button is-info is-rounded fixed-size" v-bind:disabled="!isDisabled">Set Reminder</button>
                      </div>
                  </div>
              </div>
          </div>
      
    </div>
  </app-reminder>

  <script>
  Vue.component('app-reminder', {
      data: function () { 
          return {
            email: TC.app.account.email,
            date: moment(TC.app.account.serviceDate).format('Y-M-D'),
            isDisabled: true,
            switchDate: TC.app.account.switchDate,
            isReminded: (TC.app.account.isReminded !== null) ? true : false
          }
      },
      mounted: function() {
            
            if(this.email !== '') {
                this.isDisabled = true;
            } else {
                this.isDisabled = false;
            }
            if(this.isReminded){
                TweenMax.to('.band', 0, {opacity:0, display:'none'});
            }
            TC.fn.setup.toggleInput();

            var vm = this;
            setTimeout(function(){
              vm.animateBandHide();
              vm.animateBtnSideShow();
            }, 15000)
      },
      methods:{
        showModal: function(){
            TweenMax.to('#price-alert-modal', .24, {opacity:1, display:'block'});
            TweenMax.fromTo('.modal-background', .5, {opacity:0}, {opacity:.8})
            TweenMax.fromTo('.modal-card', .7, {y:-100, opacity:0, scale:1.3}, {y: 100, opacity:1, scale: 1, ease:Bounce.easeOut});
        },
        closeModal: function() {
            TweenMax.fromTo('.modal-card', .24, {opacity:1}, {opacity:0, scale: 1.1, ease:Bounce.easeOut});
            TweenMax.to('.modal-background', .24, {opacity:0})
            TweenMax.to('#price-alert-modal', .24, {opacity:0, display:'none'});
        },
        animateModalHide: function(){
            TweenMax.fromTo('.modal-card', .24, {opacity:1}, {opacity:0, scale: 1.1, ease:Bounce.easeOut});
            TweenMax.to('.modal-background', .24, {opacity:0})
            TweenMax.to('#price-alert-modal', .24, {opacity:0, display:'none'});
            this.animateBandHide();
            this.animateBtnSideHide();
        },
        animateBandShow: function(){
          this.animateBtnSideHide();
          TweenMax.to('.band', .7, {height:'85px', display:'block', ease:Elastic.easeOut});
        },
        animateBandHide: function(){
            TweenMax.to('.band', .24, {height:0, width:0, right:'5000px', delay:.4, ease:Bounce.easeOut});
        },
        animateBtnSideShow: function(){
          this.hideText();
          TweenMax.fromTo('.app-reminder .btn-fixed-side', .24, {x:130}, {x:-10, display:'block', delay:.4, ease:Bounce.easeOut});
        },
        animateBtnSideHide: function(){
          TweenMax.fromTo('.app-reminder .btn-fixed-side', .4, {x:0}, {x:130, display:'none', delay:.4, ease:Bounce.easeOut});
        },
        showText: function(event) {
          if(event != undefined){
            event.stopPropagation()
          }
          TweenMax.to('.app-reminder .btn-fixed-side button', .1, {width:'200px'});
          TweenMax.to('.app-reminder .btn-fixed-side .txt', .26, { opacity:1, width:'150px'});
        },
        hideText: function(event) {
          if(event != undefined){
            event.stopPropagation()
          }
          TweenMax.to('.app-reminder .btn-fixed-side button', .24, { width:'50px'});
          TweenMax.to('.app-reminder .btn-fixed-side .txt', .2, {opacity:0, width:'1px'});
        },
        closeModalAndHideBar: function() {
            this.animateModalHide();
            TC.app.account.isReminded = true;
            TC.app.account.switchDate = this.switchDate;
            TC.app.account.email = this.email;
            TC.fn.createLead("switch-reminder");
        }
      },
      watch: { 
          email: {
              handler: function() {
                
                  if(this.email !== '') {
                        this.isDisabled = true;
                    } else {
                        this.isDisabled = false;
                    }
              }
          },
          serviceDate: {
              handler: function() {
                
              }
          }
      },
      
      props: []
    });
    </script>
</apex:component>